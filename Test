#!/usr/bin/env bash

set -euo pipefail

announce()  { echo     -e '\n\n---- ' "$@";         }
die()       { echo >&2 -e "fatal:" "$@"; exit 1;    }


# Checks
# ------

submodules=(tests/ethereum-tests kevm-pyk/src/kevm_pyk/kproj/plugin deps/ulm)
check_submodules() {
    submodule_update_cmd="git submodule update --init --recursive --depth 1 --single-branch ${submodules[@]}"
    for s in "${submodules[@]}"; do
        (cd "$s" && [[ -e '.git' ]]) ||
            die "Git submodule '$s' not initialized.\n Initialize with:\n\n\t$submodule_update_cmd"
        git diff  --exit-code --ignore-submodules=none "$s" ||
            die "Git submodule '$s' is modified.\n Use 'git add' to cache this change, or update modules with:\n\n\t$submodule_update_cmd"
    done
}

check_clang_version() {
    minimum_version="15.0.0"
    actual_version="$(clang --version | head -n 1 | cut -d' ' -f 3)"
    [[  "$minimum_version" = $(echo -e "$minimum_version\n$actual_version" | sort -V | head -n1) ]] ||
        die "Clang version $minimum_version or higher needed."
}

check_go_version() {
    expected_version="go1.23.1"
    actual_version="$(go version | head -n 1 | cut -d' ' -f3)" ||
        die "go not installed"
    [[ "$expected_version" = "$actual_version" ]] ||
        die "Unexpected go version.\nExpected: $expected_version;\n     got: $actual_version"
}

check_k() {
    update='\n\tkup shell k.openssl --version v$(cat deps/k_release)'
    type kompile 2>/dev/null >/dev/null \
        || die 'K not found in path.' \
               '\nInstall with:' "$update"
    found_version="$(kompile --version | head -n 1)" \
        || die "Unable to determine K version"
    found_version="${found_version#K version:    v}"
    expected_version="$(cat deps/k_release)"
    [[ "$found_version" = "$expected_version"  ]] \
        || die 'Unexpected kompile version.\n'  \
               "\n   Found: $found_version"     \
               "\nExpected: $expected_version"  \
               '\nUpdate with:' "$update"
}

# Paths
# -----

repo_root="$(cd "$(dirname "$0")" && pwd -P)"
build_dir="$repo_root/.build"
lib_dir=$build_dir/lib/
lib_ulm_hooks="$lib_dir/libulmkllvm.so"
ulm_dir="$repo_root"/deps/ulm
ulm_kllvm_dir="$ulm_dir"/kllvm/
ulm_geth_dir="$ulm_dir"/op-geth/

# Builders
# --------

build_with_kdist() {
    declare -g verbose
    poetry -C kevm-pyk run kdist $verbose build "$@" > /dev/null ||
        die "Building blockchain plugin failed. Run with '-v'for logs"
}

build_ulm_hooks() {
    mkdir -p "$build_dir/lib/"
    make -C "$ulm_kllvm_dir"                \
            CXX="clang++"                   \
            ULM_LIB_NAME="$lib_ulm_hooks"   \
            CPPFLAGS=-D"EVM_ONLY"
}

build_concrete_semantics() {
    # NOTE: We manually build so that we can add additional flags, not in the kdist build.
    # NOTE: These flags must be manually kept in sync with:
    #
    #   https://github.com/Pi-Squared-Inc/ulm/blob/main/Docker/OP-KEVM/Dockerfile.opkevm
    #
    # TODO: Use Makefile for this build rule
    kompile kevm-pyk/src/kevm_pyk/kproj/evm-semantics/evm.md                                 \
            --output-definition $build_dir/libkevm                                           \
            --llvm-kompile-output "$lib_dir"/libkevm.so                                      \
            --main-module EVM --syntax-module EVM                                            \
            --md-selector 'k | standard'                                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/evm-semantics                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/plugin                                            \
            --hook-namespaces 'JSON KRYPTO ULM'                                              \
            --backend llvm  -O3                                                              \
            -ccopt -std=c++20  -ccopt -lssl    -ccopt -lcrypto    -ccopt -lsecp256k1         \
            -ccopt $(poetry -C kevm-pyk run kdist which evm-semantics.plugin)/krypto.a       \
            -ccopt -Wno-deprecated-declarations                                              \
            --type-inference-mode simplesub --verbose -I "$ulm_kllvm_dir"                    \
            -ccopt -L"$build_dir/lib" -ccopt -lulmkllvm --llvm-kompile-type library          \
            -ccopt -g --llvm-mutable-bytes                                                   \
            -ccopt "$ulm_kllvm_dir"/lang/ulm_language_entry.cpp -ccopt -I"$ulm_kllvm_dir"    \
            -ccopt -DULM_LANG_ID=kevm --llvm-hidden-visibility                               \
            -ccopt -fPIC -ccopt -shared
}

build_symbolic_semantics() {
    # NOTE: We manually build so that we can add additional flags, not in the kdist build.
    # NOTE: These flags must be manually kept in sync with:
    #
    #   https://github.com/Pi-Squared-Inc/ulm/blob/main/Docker/OP-KEVM/Dockerfile.opkevm
    #
    # TODO: Use Makefile for this build rule
    kompile kevm-pyk/src/kevm_pyk/kproj/evm-semantics/cse.md                                 \
            --output-definition $build_dir/symbolic                                          \
            --main-module CSE --syntax-module CSE                                            \
            --md-selector 'k | standard'                                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/evm-semantics                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/plugin                                            \
            --hook-namespaces 'JSON KRYPTO ULM'                                              \
            --backend haskell                                                                \
            --type-inference-mode simplesub --verbose -I "$ulm_kllvm_dir"
}

test_symbolic_backend() {
        kprove kevm-pyk/src/kevm_pyk/kproj/evm-semantics/summaries/sum.k \
               --definition .build/symbolic/                                       \
               --md-selector k                                                     \
               -I kevm-pyk/src/kevm_pyk/kproj/evm-semantics                        \
               -I kevm-pyk/src/kevm_pyk/kproj/plugin                               \
               -I deps/ulm/kllvm/ --depth 200
}

build_csepgm_standalone_semantics() {
    [ $# -ne 1 ] && die "Building CSE[Pgm] requires a program argument"
    PROG=$1
    mkdir -p ".build/csepgm/$PROG"
    kompile "csepgm/$PROG.k"                                                                 \
            --output-definition "$build_dir/csepgm/$PROG"                                    \
            --main-module "$PROG" --syntax-module EVM                                        \
            --md-selector 'k | csepgm'                                                       \
            -I kevm-pyk/src/kevm_pyk/kproj/evm-semantics                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/plugin                                            \
            --hook-namespaces 'JSON KRYPTO'                                                  \
            --backend llvm  -O3                                                              \
            -ccopt -std=c++20  -ccopt -lssl    -ccopt -lcrypto    -ccopt -lsecp256k1         \
            -ccopt $(poetry -C kevm-pyk run kdist which evm-semantics.plugin)/krypto.a       \
            -ccopt -Wno-deprecated-declarations                                              \
            --type-inference-mode simplesub --verbose -I "$ulm_kllvm_dir"                    \
            -ccopt -L"$build_dir/lib"                                                        \
            -ccopt -g --llvm-mutable-bytes
}

encode_schedule() {
    [ $# -ne 1 ] && die "usage: $0 <schedule-string>"
    case "$1" in
        "FRONTIER"         ) echo  0  ;;
        "HOMESTEAD"        ) echo  1  ;;
        "TANGERINE_WHISTLE") echo  2  ;;
        "SPURIOUS_DRAGON"  ) echo  3  ;;
        "BYZANTIUM"        ) echo  4  ;;
        "CONSTANTINOPLE"   ) echo  5  ;;
        "PETERSBURG"       ) echo  6  ;;
        "ISTANBUL"         ) echo  7  ;;
        "BERLIN"           ) echo  8  ;;
        "LONDON"           ) echo  9  ;;
        "MERGE"            ) echo  10 ;;
        "SHANGHAI"         ) echo  11 ;;
        "CANCUN"           ) echo  12 ;;
        *)  die "Invalid schedule integer $1" ;;
    esac
}

test_csepgm_standalone_semantics() {
   [ $# -lt 5 ] && die "usage: $0 <program_name> <address:uint160> <schedule:string> <gas:uint256> <static:bool> [krun_extra_args...]"
   PROG=$1
   ADDRESS=$2
   SCHEDULE=$(encode_schedule $3)
   GAS=$4
   STATIC=$5
   shift 5
   set -x
   krun --definition "$build_dir/csepgm/$PROG" "$repo_root/csepgm/$PROG.evm" -cACCTCODE="$ADDRESS" -cSCHEDULE="$SCHEDULE" -cGAS="$GAS" -cSTATIC="$STATIC" "$@"
   set +x
}

export CGO_LDFLAGS="-lulmkllvm -L$lib_dir/ -lkevm -L${build_dir}/libkevm/"
export LD_LIBRARY_PATH="$lib_dir/"

build_ulm_server() { (cd "$ulm_geth_dir"; make geth; ) }
test_ulm() {
    (   cd "$ulm_geth_dir"/tests;
        go test -c;
        ./tests.test -test.run TestULMBlockchain -test.parallel 1 -test.v
    )
}



# Main
# ----

# Prevent poetry from asking for Keyring information. It started promting me for
# it once I installed some Gnome packages. I'm not sure why it wants it, perhaps
# to access project github dependencies, or enable SSH keys?
export PYTHON_KEYRING_BACKEND=keyring.backends.fail.Keyring

verbose=
[[ $# -gt 0 ]] && [[ $1 = '-v' ]] && verbose=--verbose

check_submodules
check_k
check_clang_version
check_go_version

announce 'Setting up Python dependencies';   make -s poetry
announce 'Building Blockchain Plugin';       build_with_kdist "evm-semantics.plugin"
announce 'Building ULM Hooks';               build_ulm_hooks
announce 'Building Concrete Semantics';      build_concrete_semantics
announce 'Building Symbolic Semantics';      build_symbolic_semantics
announce 'Build ULM Server';                 build_ulm_server

announce 'Testing Symbolic Backend';         test_symbolic_backend
announce 'Testing ULM';                test_ulm

announce 'Building CSE[SumToN] Semantics';     build_csepgm_standalone_semantics SUM_TO_N
announce 'Testing CSE[SumToN] Semantics';      test_csepgm_standalone_semantics SUM_TO_N 0 CANCUN 100000 false
