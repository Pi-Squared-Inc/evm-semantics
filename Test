#!/usr/bin/env bash

set -euo pipefail

announce()  { echo     -e '\n\n---- ' "$@";         }
die()       { echo >&2 -e "fatal:" "$@"; exit 1;    }


# Checks
# ------

submodules=(tests/ethereum-tests kevm-pyk/src/kevm_pyk/kproj/plugin
            deps/metropolis web/k-web-theme
)
check_submodules() {
    for s in "${submodules[@]}"; do
        (cd "$s" && [[ -e '.git' ]]) ||
            die "Git submodule '$s' not initialized.\n Initialize with:\n\n\tgit submodule update --init --recursive"
        git diff  --exit-code --ignore-submodules=none "$s" ||
            die "Git submodule '$s' is modified.\n Use 'git add' to cache this change, or update modules with:\n\n\tgit submodule update --init --recursive"
    done
}

check_clang_version() {
    minimum_version="15.0.0"
    actual_version="$(clang --version | head -n 1 | cut -d' ' -f 3)"
    [[  "$minimum_version" = $(echo -e "$minimum_version\n$actual_version" | sort -V | head -n1) ]] ||
        die "Clang version $minimum_version or higher needed."
}

check_k() {
    update='\n\tkup shell k.openssl --version v$(cat deps/k_release)'
    type kompile 2>/dev/null >/dev/null \
        || die 'K not found in path.' \
               '\nInstall with:' "$update"
    found_version="$(kompile --version | head -n 1)" \
        || die "Unable to determine K version"
    found_version="${found_version#K version:    v}"
    expected_version="$(cat deps/k_release)"
    [[ "$found_version" = "$expected_version"  ]] \
        || die 'Unexpected kompile version.\n'  \
               "\n   Found: $found_version"     \
               "\nExpected: $expected_version"  \
               '\nUpdate with:' "$update"
}

# Builders
# --------

ULM_DIR=deps/ulm
ULM_KLLVM_DIR="$ULM_DIR"/kllvm/
ULM_GETH_DIR="$ULM_DIR"/op-geth/

build_with_kdist() {
    declare -g verbose
    poetry -C kevm-pyk run kdist $verbose build "$@" > /dev/null ||
        die "Building blockchain plugin failed. Run with '-v'for logs"
}

LIB_ULM_HOOKS=$(pwd)/.build/libulmkllvm.so
build_ulm_hooks() {
    mkdir -p .build
    make -C "$ULM_KLLVM_DIR"                \
            CXX="clang++"                   \
            ULM_LIB_NAME="$LIB_ULM_HOOKS"   \
            CPPFLAGS=-D"EVM_ONLY"
}

build_k_semantics() {
    # NOTE: We manually build so that we can add additional flags, not in the kdist build.
    # NOTE: These flags must be manually kept in sync with:
    #
    #       https://github.com/Pi-Squared-Inc/ulm/blob/main/Docker/OP-KEVM/Dockerfile.opkevm

    kompile kevm-pyk/src/kevm_pyk/kproj/evm-semantics/evm.md                                \
            --main-module EVM --syntax-module EVM                                           \
            --md-selector 'k & ! symbolic'                                                  \
            --output-definition libkevm                                                     \
            -I kevm-pyk/src/kevm_pyk/kproj/evm-semantics                                    \
            -I kevm-pyk/src/kevm_pyk/kproj/plugin                                           \
            --hook-namespaces 'JSON KRYPTO ULM'                                             \
            --backend llvm  -O3                                                             \
            -ccopt -std=c++20  -ccopt -lssl    -ccopt -lcrypto    -ccopt -lsecp256k1        \
            -ccopt $(poetry -C kevm-pyk run kdist which evm-semantics.plugin)/krypto.a      \
            -ccopt -Wno-deprecated-declarations                                             \
            --type-inference-mode simplesub --verbose -I "$ULM_KLLVM_DIR"                   \
            -ccopt -L".build" -ccopt -lulmkllvm --llvm-kompile-type library                 \
            --llvm-kompile-output libkevm.so -ccopt -g --llvm-mutable-bytes                 \
            -ccopt "$ULM_KLLVM_DIR"/lang/ulm_language_entry.cpp -ccopt -I"$ULM_KLLVM_DIR"   \
            -ccopt -DULM_LANG_ID=kevm --llvm-hidden-visibility                              \
            -ccopt -fPIC -ccopt -shared
}


build_ulm_server() {
    (cd "$ULM_GETH_DIR"; make geth)
}

# Main
# ----

# Prevent poetry from asking for Keyring information. It started promting me for
# it once I installed some Gnome packages. I'm not sure why it wants it, perhaps
# to access project github dependencies, or enable SSH keys?
export PYTHON_KEYRING_BACKEND=keyring.backends.fail.Keyring

verbose=
[[ $# -gt 0 ]] && [[ $1 = '-v' ]] && verbose=--verbose

check_submodules
check_k
check_clang_version

announce 'Setting up Python dependencies';   make -s poetry
announce 'Building Blockchain Plugin';       build_with_kdist "evm-semantics.plugin"
announce 'Building ULM Hooks';               build_ulm_hooks
announce 'Building K Semantics';             build_k_semantics
announce 'Build ULM Server';                 build_ulm_server
