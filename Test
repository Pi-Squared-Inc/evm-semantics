#!/usr/bin/env bash

set -euo pipefail

die() {
    echo >&2 -e "fatal:" "$@"
    exit 1
}


# Checks
# ------

check_k() {
    update='\n\tkup shell k --version v$(cat deps/k_release)'
    type kompile 2>/dev/null >/dev/null \
        || die 'K not found in path.' \
               '\nInstall with:' "$update"
    found_version="$(kompile --version | head -n 1)" \
        || die "Unable to determine K version"
    found_version="${found_version#K version:    v}"
    expected_version="$(cat deps/k_release)"
    [[ "$found_version" = "$expected_version"  ]] \
        || die 'Unexpected kompile version.\n'  \
               "\n   Found: $found_version"     \
               "\nExpected: $expected_version"  \
               '\nUpdate with:' "$update"
}

submodules=(tests/ethereum-tests kevm-pyk/src/kevm_pyk/kproj/plugin
            deps/metropolis web/k-web-theme
)
check_submodules() {
    for s in "${submodules[@]}"; do
        (cd "$s" && [[ -e '.git' ]]) ||
            die "Git submodule '$s' not initialized.\n Initialize with:\n\n\tgit submodule update --init --recursive"
        git diff  --exit-code --ignore-submodules=none "$s" ||
            die "Git submodule '$s' is modified. Use 'git add' to cache this change, or update modules with:\n\n\tgit submodule update --init --recursive"
    done
}


check_clang_version() {
    minimum_version="15.0.0"
    actual_version="$(clang --version | head -n 1 | cut -d' ' -f 3)"
    [[  "$minimum_version" = $(echo -e "$minimum_version\n$actual_version" | sort -V | head -n1) ]] ||
        die "Clang version $minimum_version or higher needed."
}
# Main
# ----

# Prevent poetry from asking for Keyring information. It started promting me for
# it once I installed some Gnome packages. I'm not sure why it wants it, perhaps
# to access project github dependencies, or enable SSH keys?
export PYTHON_KEYRING_BACKEND=keyring.backends.fail.Keyring

check_submodules
check_k
check_clang_version
